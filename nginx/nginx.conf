events {
    worker_connections 1024;
}

http {
    client_max_body_size 200m;
    log_format main '$remote_addr - $host:$server_port [$time_local] '
                    '"$request" $status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /dev/stdout main;
    error_log  /dev/stderr warn;
    # WebSocket upgrade helper for reverse proxy
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    # Load Balancing Example (uncomment and modify as needed)
    # upstream backend_lb {
    #     server coe-backend-1:8000;
    #     server coe-backend-2:8000;
    #     # Add more backend servers here
    #     # Choose a load balancing method:
    #     # least_conn; # Distribute requests to the server with the least active connections
    #     # ip_hash;    # Distribute requests based on client IP address
    # }

    upstream backend {
        server coe-backend:8000; # This refers to the coe-backend service in docker-compose
    }

    # Example for a second upstream for ragpipeline if you want to load balance it
    # upstream ragpipeline_lb {
    #     server coe-ragpipeline-1:8001;
    #     server coe-ragpipeline-2:8001;
    #     # least_conn;
    # }

    upstream vector_db {
        server chroma-external:8000;
    }

    # Gzip Compression (uncomment to enable)
    # gzip on;
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_types text/plain text/css application/json application/javascript text/xml application/xml+rss text/javascript;

    # Caching Example (uncomment and configure as needed)
    # proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=my_cache:10m inactive=60m;
    # proxy_cache_valid 200 302 10m;
    # proxy_cache_valid 404      1m;

    server {
        listen 80;
        # listen 443 ssl; # Uncomment for HTTPS

        # SSL/TLS Configuration Example (uncomment and configure for HTTPS)
        # ssl_certificate /etc/nginx/certs/your_domain.crt;
        # ssl_certificate_key /etc/nginx/certs/your_domain.key;
        # ssl_protocols TLSv1.2 TLSv1.3;
        # ssl_ciphers 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256';
        # ssl_prefer_server_ciphers on;

        # Custom Error Pages Example (uncomment and create HTML files)
        # error_page 404 /404.html;
        # location = /404.html {
        #     root /usr/share/nginx/html;
        #     internal;
        # }
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #     root /usr/share/nginx/html;
        #     internal;
        # }

        # Block Swagger/OpenAPI exposure by default
        location ~ ^/(docs|redoc|openapi\.json)$ {
            return 404;
        }
        location ~ ^/agent/(docs|redoc|openapi\.json)(/.*)?$ {
            return 404;
        }
        location ~ ^/rag/(docs|redoc|openapi\.json)(/.*)?$ {
            return 404;
        }

        location / {
            proxy_pass http://backend; # Or http://backend_lb; if using load balancing
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_cache my_cache; # Uncomment for caching
            # Increase upstream timeouts for long-running LLM requests
            proxy_http_version 1.1;
            proxy_read_timeout 300;
            proxy_send_timeout 300;
            proxy_connect_timeout 60;
            proxy_buffering off;
        }

        # Ensure trailing slash for RAG prefix
        location = /rag {
            return 301 /rag/;
        }

        location /rag/ {
            proxy_pass http://coe-ragpipeline:8001/; # Or http://ragpipeline_lb/; if using load balancing
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_cache my_cache; # Uncomment for caching
            # Increase upstream timeouts for long-running RAG requests
            proxy_http_version 1.1;
            proxy_read_timeout 300;
            proxy_send_timeout 300;
            proxy_connect_timeout 60;
            proxy_buffering off;
            # NOTE: Backend-only access (future)
            # To restrict direct RAG access later, consider:
            # - allow/deny by IP
            # - basic auth
            # - or remove this location to disable external exposure
        }

        location = /vector {
            return 301 /vector/;
        }

        location /vector/ {
            proxy_pass http://vector_db/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_read_timeout 300;
            proxy_send_timeout 300;
            proxy_connect_timeout 60;
            proxy_buffering off;
        }

        # Monitoring routes: Grafana and Loki (single monitoring stack)
        # Redirect /grafana -> /grafana/
        location = /grafana {
            return 301 /grafana/;
        }
        # Serve Grafana from subpath via host mapping
        location /grafana/ {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Prefix /grafana;
            proxy_pass http://host.docker.internal:3000;
        }

        # Optional: expose Loki API under /loki/ (for external queries)
        location /loki/ {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_pass http://host.docker.internal:3100/;
        }
    }
}
