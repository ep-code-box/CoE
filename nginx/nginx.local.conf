events {
    worker_connections 1024;
}

http {
    upstream backend {
        server backend:8000;
    }

    # HTTP (80): 로컬 개발 편의를 위해 HTTPS 리다이렉트 없이 직접 프록시
    server {
        listen 80;
        server_name localhost local.greatcoe.cafe24.com;

        location = /agent {
            return 301 /agent/;
        }

        location /agent/ {
            proxy_pass http://backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Ensure trailing slash for RAG prefix
        location = /rag {
            return 301 /rag/;
        }

        location /rag/ {
            proxy_pass http://ragpipeline:8001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # NOTE: Backend-only access (future)
            # - Direct access to /rag will be disabled after grace period.
            # - To prepare, you can restrict by IP or require basic auth.
            # Example (commented; do not enable yet):
            # allow 127.0.0.1; deny all;
            # auth_basic "Restricted";
            # auth_basic_user_file /etc/nginx/.htpasswd;
        }
    }

    # HTTPS (443): 로컬 자체 서명 인증서로 HTTPS 제공
    server {
        listen 443 ssl;
        server_name localhost local.greatcoe.cafe24.com;

        ssl_certificate /etc/nginx/certs/local/fullchain.pem;
        ssl_certificate_key /etc/nginx/certs/local/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;

        location = /agent {
            return 301 /agent/;
        }

        location /agent/ {
            proxy_pass http://backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Ensure trailing slash for RAG prefix (HTTPS)
        location = /rag {
            return 301 /rag/;
        }

        location /rag/ {
            proxy_pass http://ragpipeline:8001/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # NOTE: Backend-only access (future)
            # See the HTTP block above for restriction examples.
        }
    }
}
